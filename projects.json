[
    {
        "title": "HUB75 Controller for LED Matrices",
        "description": "Designed a HUB75 LED matrix controller in VHDL on an FPGA, demonstrated with a dice animation that showcases modular display control, timing, and dice logic.",
        "tags": [
            "VHDL",
            "FPGAs",
            "Quartus Prime",
            "SignalTap II"
        ],
        "skills": "VHDL,FPGA,DE10,SignalTap II",
        "images": [
            "assets/Hub75-Demo1.jpg",
            "assets/Hub75-Demo2.jpeg"
        ],
        "githubLink": "https://github.com/felomousa/hub75-dice-controller",
        "details": {
            "overview": "This team project involved creating a digital dice system that displays random dice faces on an LED matrix. The system uses a DE10 FPGA board to control a HUB75-compatible LED matrix, with custom VHDL components handling the display logic and dice state transitions.",
            "features": [
                "Custom VHDL controller for direct management of a HUB75 LED matrix via FPGA GPIO",
                "Modular VHDL components for clock scaling, dice logic, and display handling",
                "Finite State Machine (FSM) for controlling dice face transitions",
                "Pseudo-random number generation for dice rolls",
                "RGB multiplexing for dice face rendering onto display matrix"
            ],
            "challenges": "challenges revolved around debugging timing issues that led to flicker and ghosting due to improper RGB latching. used SignalTap II during logic development to troubleshoot timing issues such as misaligned pulses, incorrect bit ordering, and unintended behavior. the biggest takeaway was that careful review of documentation and iterative testing are key to clearing hardware challenges."
        }
    },
    {
        "title": "Pharmacy Blister-pack Scheduler",
        "description": "Built a secure scheduling system for pharmacy blister packs using Python, Flask, and SQLite with OTP authentication and automated reporting.",
        "tags": [
            "Python",
            "Flask",
            "SQLite",
            "React.js",
            "Raspberry Pi"
        ],
        "skills": "Python,Flask,SQLite,React.js,Raspberry Pi",
        "images": "#",
        "githubLink": "#",
        "details": {
            "overview": "This project addressed the challenge of scheduling and tracking pharmacy blister pack preparations. The system provides pharmacies with a secure, efficient way to manage patient medication schedules, track preparation status, and generate reports.",
            "features": [
                "RESTful API built with Python and Flask for backend operations",
                "SQLite database for efficient data management and querying",
                "Password-less registration and login using One-Time Password (OTP) authentication",
                "React.js frontend for responsive user interface",
                "Automated report generation for pharmacy management",
                "User activity tracking for audit purposes"
            ],
            "security": [
                "Rate limiting to prevent brute force attacks",
                "Google ReCaptcha integration for bot protection",
                "SQL input sanitization to prevent injection attacks",
                "Deployed on Raspberry Pi with nginx as reverse proxy",
                "SSL encryption via Let's Encrypt for secure data transmission"
            ]
        }
    },
    {
        "title": "Spotify LED Matrix Integration",
        "description": "Built a real-time Spotify display system for a 192Ã—32 LED matrix that shows current song info and album art.",
        "tags": [
            "Python",
            "Flask",
            "APIs",
            "OpenCV"
        ],
        "skills": "Python,Flask,OpenCV,PIL",
        "images": [
            "assets/spotify_demo.gif",
            "assets/spotify_demo1.jpg",
            "assets/spotify_demo2.jpg"
        ],
        "githubLink": "https://github.com/felomousa/SpotifyDisplay",
        "details": {
            "overview": "Developed a system that connects to Spotify's API to display real-time playback data on an LED matrix. The display shows current song, artist, album art, and a synchronized progress bar.",
            "features": [
                "Spotify API integration for real-time music data",
                "Flask server for handling API requests and authentication",
                "Image processing pipeline to optimize album art for LED display",
                "Synchronized progress bar that updates with song position",
                "Automatic display refresh when tracks change"
            ],
            "implementation": "Used Python with Spotify's API to fetch playback data. Implemented image processing with OpenCV to downscale and optimize album artwork for the limited resolution and color depth of the LED matrix. Created a Flask endpoint to handle authentication and data refresh."
        }
    },
    {
        "title": "Parking Availability System",
        "description": "Developed a real-time parking occupancy monitoring system using OpenCV image processing to detect and classify parking spot availability.",
        "tags": [
            "Python",
            "OpenCV",
            "Raspberry Pi"
        ],
        "skills": "Python,OpenCV,Raspberry Pi",
        "images": [
            "assets/car-demo.png"
        ],
        "githubLink": "#",
        "details": {
            "overview": "This team project created a system to monitor parking lot occupancy in real-time using computer vision techniques. The system uses cameras to detect whether parking spots are occupied or vacant, providing valuable information for parking management.",
            "features": [
                "OpenCV image processing for parking spot detection",
                "Contour detection algorithms to classify spots as occupied or vacant",
                "Optimization for low-light conditions using NoIR cameras",
                "Gaussian blur, edge detection, and dilation for enhanced accuracy",
                "Deployment on Raspberry Pi for cost-effective implementation"
            ],
            "challenges": "The main challenges included developing robust algorithms that could work in varying lighting conditions, accurately defining parking spot boundaries, and optimizing the image processing pipeline to run efficiently on the Raspberry Pi's limited resources. We implemented various image preprocessing techniques to enhance detection accuracy."
        }
    }
]